#!/bin/bash
set -euo pipefail

ensure_bitwarden_unlocked() {
  # Check the status directly. --raw gives clean JSON.
  local status
  status=$(bw status --raw | grep -o '"status":"[^"]*"' | cut -d'"' -f4)

  case "$status" in
    "unlocked")
      echo "‚úÖ Bitwarden vault is already unlocked."
      return 0
      ;;
    "unauthenticated")
      echo "‚ùå ACTION REQUIRED: Bitwarden is not logged in. Please run 'bw login' in your terminal."
      exit 1
      ;;
    "locked")
      echo "üîí Bitwarden vault is locked. Please enter your master password to unlock:"
      # The magic happens here. We run `bw unlock --raw` and export the output.
      export BW_SESSION_KEY=$(bw unlock --raw)
      # Check if the unlock was successful. If not, the key will be empty.
      if [ -z "$BW_SESSION_KEY" ]; then
        echo "‚ùå Unlock failed. Please try again."
        exit 1
      fi
      echo "‚úÖ Bitwarden vault unlocked for this session."
      ;;
  esac
}

ensure_bitwarden_unlocked

echo "üîë Checking for GPG private key..."

GPG_KEY_ID="21D39CC1D0B3B44A" # Paste your GPG Key ID here

# Check if the secret key is already imported
if gpg --list-secret-keys | grep -q "$GPG_KEY_ID"; then
  echo "‚úÖ GPG key $GPG_KEY_ID already imported. Skipping."
  exit 0
fi

echo "Importing GPG private key from Bitwarden..."
# Fetch the secure note from Bitwarden and import it
printf "%s" "{{ (bitwarden "item" "GPG Private Key").notes }}" | gpg --import

echo "Trusting the newly imported GPG key..."
# This command tells gpg to ultimately trust your key so you don't get prompted
echo -e "5\ny\n" | gpg --command-fd 0 --expert --edit-key "$GPG_KEY_ID" trust

echo "‚úÖ GPG key imported and trusted successfully."