#!/usr/bin/env bash
#
# Idempotent, tool-aware installer for a developer environment.
# Templated by chezmoi using .chezmoidata/packages.yaml

set -euo pipefail
IFS=$'\n\t'

############################################
# Minimal UX helpers
############################################
# ASCII spinner shown while a long-running
# command executes. Usage:
#     run_with_spinner "Doing stuff" cmd arg1 arg2
run_with_spinner() {
  local msg="$1"; shift
  local pid spin='-\|/'
  echo -ne "${msg} … "
  "$@" &>/tmp/spinner.log & pid=$!
  local i=0
  while kill -0 "$pid" 2>/dev/null; do
    printf "\r%s %s" "${msg}" "${spin:i++%${#spin}:1}"
    sleep 0.15
  done
  wait "$pid" && echo -e "\r${msg} … ✅" || {
    echo -e "\r${msg} … ❌  (details below)"; tail -40 /tmp/spinner.log; exit 1; }
}

echo "🚀  Starting unified developer environment setup…"

############################################
# Layer 1 – OS packages via dnf
############################################
if command -v dnf >/dev/null 2>&1; then
  run_with_spinner "Layer 1: dnf base packages" \
    sudo dnf install -y \
      git curl zsh util-linux-user gcc-c++ cmake make pkgconf-pkg-config \
      python3-pip python3-devel openssl-devel perl perl-libs perl-core \
      podman libstdc++-devel man-db which findutils hostname iproute \
      shadow-utils htop strace lsof file tree
fi

############################################
# Layer 1.5 – CLI tools via Homebrew
############################################
if ! command -v brew >/dev/null 2>&1; then
  run_with_spinner "Install Homebrew" bash -c '
    sudo mkdir -p /home/linuxbrew/.linuxbrew && \
    sudo chown -R "$(whoami)" /home/linuxbrew/.linuxbrew && \
    NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
fi
# shellcheck disable=SC2046
# shellcheck disable=SC1091
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
run_with_spinner "brew update" brew update

BREW_PKGS=(fzf fd ripgrep bat zoxide eza git-delta btop jq yq tldr lazygit gh direnv git-lfs aria2 zellij)
run_with_spinner "brew install ${#BREW_PKGS[@]} pkgs" brew install --formula --force-bottle  "${BREW_PKGS[@]}" || \
  run_with_spinner "brew source build fallback" brew install "${BREW_PKGS[@]}"

############################################
# Layer 2 – Language toolchains
############################################
run_with_spinner "Install Rust toolchain" bash -c '
  if command -v rustc >/dev/null 2>&1; then exit 0; fi
  if command -v dnf >/dev/null 2>&1 && dnf list rust &>/dev/null; then
    sudo dnf install -y rust cargo
  else
    curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env" && rustup default stable
  fi'

run_with_spinner "Install Node (dnf/nvm)" bash -c '
  if command -v node >/dev/null 2>&1; then exit 0; fi
  if command -v dnf >/dev/null 2>&1 && dnf list nodejs &>/dev/null; then
    sudo dnf install -y nodejs
  else
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] || curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    . "$NVM_DIR/nvm.sh" && nvm install --lts
  fi'

############################################
# Layer 3 – Isolated CLIs (pipx & cargo)
############################################
run_with_spinner "pipx bootstrap" bash -c '
  if ! command -v pipx >/dev/null 2>&1; then
    python3 -m pip install --user pipx && python3 -m pipx ensurepath
  fi'

export PATH="$PATH:$HOME/.local/bin"
run_with_spinner "pipx install poetry & HF Hub" bash -c '
  pipx install --include-deps poetry || true
  pipx install --include-deps huggingface_hub || true'

# Rust standalone (zellij)
run_with_spinner "Ensure zellij" bash -c '
  if command -v zellij >/dev/null 2>&1; then exit 0; fi
  if command -v dnf >/dev/null 2>&1 && dnf list --quiet zellij &>/dev/null; then
    sudo dnf install -y zellij
  elif command -v brew >/dev/null 2>&1; then
    brew install zellij
  else
    cargo install zellij
  fi'

############################################
# Final sanity – make sure /usr/bin/zsh exists *inside the toolbox*
############################################
# Helper to create the canonical symlink _inside_ the container. We keep it
# tiny so it can be in-lined easily from another shell.
fix_zsh_symlink() {
  local z="$(command -v zsh || true)"
  [[ -n "$z" && ! -e /usr/bin/zsh ]] && sudo ln -sf "$z" /usr/bin/zsh
}

if [[ -f /.toolboxenv || -f /.containerenv ]]; then
  # We’re already *inside* the toolbox
  fix_zsh_symlink
elif command -v toolbox &>/dev/null && toolbox list -q | grep -q '^dev$'; then
  # Jump in just long enough to run the helper
  export -f fix_zsh_symlink
  toolbox run -c dev bash -c 'fix_zsh_symlink'
fi

echo "🎉  Environment bootstrap complete."
