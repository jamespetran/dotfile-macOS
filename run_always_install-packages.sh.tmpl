#!/usr/bin/env bash
#
# Idempotent, tool‑aware installer for a developer environment.
# Templated by chezmoi using .chezmoidata/packages.yaml

set -euo pipefail
IFS=$'\n\t'

############################################
# Minimal UX helpers
############################################
# ASCII spinner shown while a long‑running
# command executes. Usage:
#     run_with_spinner "Doing stuff" cmd arg1 arg2
run_with_spinner() {
  local msg="$1"; shift
  local pid spin='-\|/'
  echo -ne "${msg} … "
  "$@" &>/tmp/spinner.log & pid=$!
  local i=0
  while kill -0 "$pid" 2>/dev/null; do
    printf "\r%s %s" "${msg}" "${spin:i++%${#spin}:1}"
    sleep 0.15
  done
  wait "$pid" && echo -e "\r${msg} … ✅" || {
    echo -e "\r${msg} … ❌  (details below)"; tail -40 /tmp/spinner.log; exit 1; }
}

echo "🚀  Starting unified developer environment setup…"

sudo -v

############################################
# Layer 1 – OS packages via dnf
############################################
if command -v dnf >/dev/null 2>&1; then
  run_with_spinner "Layer 1: dnf base packages" \
    sudo dnf install -y \
      git curl zsh util-linux-user gcc-c++ cmake make pkgconf-pkg-config \
      python3-pip python3-devel openssl-devel perl perl-libs perl-core \
      podman libstdc++-devel man-db which findutils hostname iproute \
      shadow-utils htop strace lsof file tree
elif command -v apt-get >/dev/null 2>&1; then
  run_with_spinner "Layer 1: apt base packages" \
    sudo apt-get update && sudo apt-get install -y \
      build-essential git curl zsh cmake pkg-config python3-pip \
      python3-dev libssl-dev podman htop strace lsof file tree

fi

############################################
# Layer 1.5 – CLI tools via Homebrew
############################################
if ! command -v brew >/dev/null 2>&1; then
  run_with_spinner "Install Homebrew" bash -c '
    sudo mkdir -p /home/linuxbrew/.linuxbrew && \
    sudo chown -R "$(whoami)" /home/linuxbrew/.linuxbrew && \
    NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
fi
# shellcheck disable=SC2046
# shellcheck disable=SC1091
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
run_with_spinner "brew update" brew update

BREW_PKGS=(fzf fd ripgrep bat zoxide eza git-delta btop jq yq tldr lazygit gh direnv git-lfs aria2 zellij)
run_with_spinner "brew install ${#BREW_PKGS[@]} pkgs" brew install --formula --force-bottle  "${BREW_PKGS[@]}" || \
  run_with_spinner "brew source build fallback" brew install "${BREW_PKGS[@]}"

############################################
# Layer 2 – Language toolchains
############################################
run_with_spinner "Install Rust toolchain" bash -c '
  if command -v rustc >/dev/null 2>&1; then exit 0; fi
  if command -v dnf >/dev/null 2>&1 && dnf list rust &>/dev/null; then
    sudo dnf install -y rust cargo
  else
    curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env" && rustup default stable
  fi'

run_with_spinner "Install Node (dnf/nvm)" bash -c '
  if command -v node >/dev/null 2>&1; then exit 0; fi
  if command -v dnf >/dev/null 2>&1 && dnf list nodejs &>/dev/null; then
    sudo dnf install -y nodejs
  else
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] || curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    # shellcheck disable=SC1090
    . "$NVM_DIR/nvm.sh" && nvm install --lts
  fi'

############################################
# Layer 2.5 – Shell Frameworks
############################################
# Note: We use --unattended to prevent the installer from
# trying to change the default shell or modify our .zshrc,
# which chezmoi is already managing.
run_with_spinner "Install Oh My Zsh" bash -c '
  if [ -d "$HOME/.oh-my-zsh" ]; then exit 0; fi
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended'

############################################
# Layer 3 – Isolated CLIs (pipx & cargo)
############################################
run_with_spinner "pipx bootstrap" bash -c '
  if ! command -v pipx >/dev/null 2>&1; then
    python3 -m pip install --user pipx && python3 -m pipx ensurepath
  fi'

export PATH="$PATH:$HOME/.local/bin"
run_with_spinner "pipx install poetry & HF Hub" bash -c '
  pipx install --include-deps poetry || true
  pipx install --include-deps huggingface_hub || true'

# Rust standalone (zellij)
run_with_spinner "Ensure zellij" bash -c '
  if command -v zellij >/dev/null 2>&1; then exit 0; fi
  if command -v dnf >/dev/null 2>&1 && dnf list --quiet zellij &>/dev/null; then
    sudo dnf install -y zellij
  elif command -v brew >/dev/null 2>&1; then
    brew install zellij
  else
    cargo install zellij
  fi'

############################################
# Layer 4 – Zsh Plugins
############################################
ZSH_CUSTOM=${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}
PLUGINS_DIR="$ZSH_CUSTOM/plugins"

run_with_spinner "Install/Update zsh-autosuggestions" bash -c \
  "[ -d '$PLUGINS_DIR/zsh-autosuggestions' ] || git clone https://github.com/zsh-users/zsh-autosuggestions.git '$PLUGINS_DIR/zsh-autosuggestions'"

run_with_spinner "Install/Update zsh-syntax-highlighting" bash -c \
  "[ -d '$PLUGINS_DIR/zsh-syntax-highlighting' ] || git clone https://github.com/zsh-users/zsh-syntax-highlighting.git '$PLUGINS_DIR/zsh-syntax-highlighting'"

############################################
# Final sanity – make sure /usr/bin/zsh exists *inside the toolbox*
############################################
fix_zsh_symlink() {
  local zsh_path="$1"
  if [[ -n "$zsh_path" && ! -e /usr/bin/zsh ]]; then
    sudo ln -sf "$zsh_path" /usr/bin/zsh
  fi
}

# If we are *already* in the toolbox just fix it;
# otherwise, try to jump in and fix it from the host.
if [[ -f /.toolboxenv || -f /.containerenv ]]; then
  run_with_spinner "Ensure /usr/bin/zsh exists" \
    fix_zsh_symlink "$(command -v zsh || true)"
elif command -v toolbox &>/dev/null && toolbox list -q | grep -q '^dev$'; then
  toolbox run dev bash -c 'fix_zsh_symlink "$(command -v zsh || true)"' || true
fi

echo "🎉  Environment bootstrap complete."
