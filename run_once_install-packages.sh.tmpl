#!/usr/bin/env bash
#
# Idempotent, tool-aware installer for a developer environment.
# Templated by chezmoi using .chezmoidata/packages.yaml

set -euo pipefail
IFS=$'\n\t'

echo "\U1F680 Starting unified developer environment setup..."

# --- Layer 1: System Foundation (DNF) ---
if command -v dnf >/dev/null 2>&1; then
  echo "→ Installing system foundation packages with DNF..."
  sudo dnf install -y \
{{- range .packages.dnf }}
    {{ . }} \
{{- end }}
  || { echo "❌ DNF package install failed"; exit 1; }
fi

# --- Layer 1.5: User-Space Tools (Homebrew) ---
echo "→ Installing user-space tools with Homebrew..."
if ! command -v brew >/dev/null 2>&1; then
  echo "  → Homebrew not found. Installing..."
  sudo mkdir -p /home/linuxbrew/.linuxbrew
  sudo chown -R "$(whoami)" /home/linuxbrew/.linuxbrew
  NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# Add brew to the current shell's PATH to use it immediately.
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
brew update
if brew install --force-bottle --no-build-from-source \
{{- range .packages.brew }}
  {{ . }} \
{{- end }}
; then
  echo "\U1F37A All Homebrew tools installed from bottles"
else
  echo "⚠️ Some bottles missing; falling back to source builds"
  brew install \
{{- range .packages.brew }}
    {{ . }} \
{{- end }}
fi

# --- Layer 2: Language Toolchains (Rust + Node.js) ---
echo "→ Layer 2: Installing language toolchains..."

# Rust
if command -v dnf >/dev/null 2>&1 && dnf list rust >/dev/null 2>&1; then
  sudo dnf install -y rust cargo
else
  echo "→ Falling back to rustup installer"
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  source "$HOME/.cargo/env"
  rustup default stable
fi

# Node.js
if command -v dnf >/dev/null 2>&1 && dnf list nodejs >/dev/null 2>&1; then
  sudo dnf install -y nodejs
else
  export NVM_DIR="$HOME/.nvm"
  if [ ! -s "$NVM_DIR/nvm.sh" ]; then
    echo "  → Installing nvm..."
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
  fi
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
  nvm install --lts
fi

# --- Layer 3: Isolated CLI Apps (pipx, cargo) ---
echo "→ Layer 3: Installing isolated CLI applications..."
[ -s "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"
[ -s "$HOME/.nvm/nvm.sh" ] && . "$HOME/.nvm/nvm.sh"

if ! command -v pipx >/dev/null 2>&1; then
  python3 -m pip install --user pipx
  python3 -m pipx ensurepath
fi

if command -v dnf >/dev/null 2>&1 && dnf list --quiet pipx >/dev/null 2>&1; then
  sudo dnf install -y pipx
else
  python3 -m pip install --user pipx
  python3 -m pipx ensurepath
fi

export PATH="$PATH:$HOME/.local/bin"

# Python CLIs
pipx install --include-deps poetry
pipx install --include-deps huggingface_hub

# Rust CLIs
if command -v dnf >/dev/null 2>&1 && dnf list --quiet zellij >/dev/null 2>&1; then
  sudo dnf install -y zellij
elif command -v brew >/dev/null 2>&1; then
  brew install zellij
else
  cargo install zellij
fi

# Fix zsh path for toolbox
if [[ "$(command -v zsh)" != "/usr/bin/zsh" ]]; then
  sudo ln -sf "$(command -v zsh)" /usr/bin/zsh
fi

echo "✅ Package setup complete."
