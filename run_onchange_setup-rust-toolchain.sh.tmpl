#!/bin/bash
set -euo pipefail

echo "ü¶Ä Setting up Rust-grade development toolchain..."

# Install cargo-nextest if not already installed
if ! command -v cargo-nextest >/dev/null 2>&1; then
  echo "‚ö° Installing cargo-nextest..."
  cargo install cargo-nextest
fi

# Install sccache for distributed compilation caching
if ! command -v sccache >/dev/null 2>&1; then
  echo "üèéÔ∏è  Installing sccache..."
  cargo install sccache
fi

# Install additional Rust development tools
echo "üõ†Ô∏è  Installing Rust development tools..."
cargo install --locked cargo-watch cargo-expand cargo-edit cargo-outdated cargo-audit cargo-bloat 2>/dev/null || true

# Configure sccache globally
echo "üì¶ Configuring sccache for build acceleration..."
mkdir -p ~/.config/sccache

# Set up sccache configuration
cat > ~/.config/sccache/config <<EOF
[cache.disk]
dir = "$HOME/.cache/sccache"
size = "10G"

[dist]
# Uncomment for distributed builds across machines
# scheduler_url = "http://localhost:10600"
EOF

# Configure Rust to use sccache
cat > ~/.cargo/config.toml <<EOF
[build]
rustc-wrapper = "sccache"

[target.x86_64-unknown-linux-gnu]
linker = "clang"
rustflags = ["-C", "link-arg=-fuse-ld=lld"]

# Optimized build settings
[profile.dev]
# Faster compile times for development
incremental = true
debug = 1
opt-level = 0

[profile.test]
# Optimized test builds
debug = 1
opt-level = 1

[profile.bench]
# Performance benchmarks
debug = false
opt-level = 3
lto = true
codegen-units = 1

[profile.release]
# Production releases
debug = false
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"
EOF

# Set up nextest configuration
mkdir -p ~/.config/nextest
cat > ~/.config/nextest/config.toml <<EOF
[profile.default]
# Run tests with maximum parallelism
test-threads = "num-cpus"

# Faster failure reporting
fail-fast = false
failure-output = "immediate-final"
success-output = "never"

# Show slow tests
slow-timeout = { period = "30s", terminate-after = 3 }

[profile.ci]
# CI-optimized settings
fail-fast = true
retries = 2
test-threads = "num-cpus"
EOF

# Configure environment variables for performance
echo "üîß Setting up environment optimizations..."

# Add to shell configuration (zsh is the target shell)
if [[ -f ~/.zshrc ]]; then
  if ! grep -q "RUSTC_WRAPPER=sccache" ~/.zshrc; then
    echo 'export RUSTC_WRAPPER=sccache' >> ~/.zshrc
    echo "  ‚úì Added RUSTC_WRAPPER to ~/.zshrc"
  fi
  if ! grep -q "SCCACHE_DIR=" ~/.zshrc; then
    echo 'export SCCACHE_DIR="$HOME/.cache/sccache"' >> ~/.zshrc
    echo "  ‚úì Added SCCACHE_DIR to ~/.zshrc"
  fi
else
  echo "  ‚ö†Ô∏è ~/.zshrc not found, skipping environment exports"
fi

echo "‚úÖ Rust toolchain optimization complete!"
echo ""
echo "üöÄ Performance improvements:"
echo "   - sccache: Distributed compilation caching"
echo "   - nextest: Blazing fast test execution"
echo "   - LLD linker: Faster linking"
echo "   - Optimized profiles: Dev/test/release/bench"
echo ""
echo "üí° New commands:"
echo "   cargo nextest run  - Super fast testing"
echo "   sccache --show-stats - Cache statistics"
echo "   cargo bloat - Binary size analysis"